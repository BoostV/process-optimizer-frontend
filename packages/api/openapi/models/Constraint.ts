/* tslint:disable */
/* eslint-disable */
/**
 * Process Optimizer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface Constraint
 */
export interface Constraint {
  /**
   *
   * @type {string}
   * @memberof Constraint
   */
  type?: ConstraintTypeEnum
  /**
   *
   * @type {Array<number>}
   * @memberof Constraint
   */
  dimensions: Array<number>
  /**
   *
   * @type {number}
   * @memberof Constraint
   */
  value: number
}

/**
 * @export
 */
export const ConstraintTypeEnum = {
  Sum: 'sum',
} as const
export type ConstraintTypeEnum =
  (typeof ConstraintTypeEnum)[keyof typeof ConstraintTypeEnum]

/**
 * Check if a given object implements the Constraint interface.
 */
export function instanceOfConstraint(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'dimensions' in value
  isInstance = isInstance && 'value' in value

  return isInstance
}

export function ConstraintFromJSON(json: any): Constraint {
  return ConstraintFromJSONTyped(json, false)
}

export function ConstraintFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Constraint {
  if (json === undefined || json === null) {
    return json
  }
  return {
    type: !exists(json, 'type') ? undefined : json['type'],
    dimensions: json['dimensions'],
    value: json['value'],
  }
}

export function ConstraintToJSON(value?: Constraint | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    type: value.type,
    dimensions: value.dimensions,
    value: value.value,
  }
}
