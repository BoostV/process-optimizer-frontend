/* tslint:disable */
/* eslint-disable */
/**
 * Process Optimizer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { ExperimentDataInner } from './ExperimentDataInner'
import {
  ExperimentDataInnerFromJSON,
  ExperimentDataInnerFromJSONTyped,
  ExperimentDataInnerToJSON,
} from './ExperimentDataInner'
import type { ExperimentOptimizerConfig } from './ExperimentOptimizerConfig'
import {
  ExperimentOptimizerConfigFromJSON,
  ExperimentOptimizerConfigFromJSONTyped,
  ExperimentOptimizerConfigToJSON,
} from './ExperimentOptimizerConfig'

/**
 *
 * @export
 * @interface Experiment
 */
export interface Experiment {
  /**
   * A plain JSON object that can contain arbitrary values
   * @type {object}
   * @memberof Experiment
   */
  extras?: object
  /**
   *
   * @type {Array<ExperimentDataInner>}
   * @memberof Experiment
   */
  data: Array<ExperimentDataInner>
  /**
   *
   * @type {ExperimentOptimizerConfig}
   * @memberof Experiment
   */
  optimizerConfig: ExperimentOptimizerConfig
}

/**
 * Check if a given object implements the Experiment interface.
 */
export function instanceOfExperiment(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'data' in value
  isInstance = isInstance && 'optimizerConfig' in value

  return isInstance
}

export function ExperimentFromJSON(json: any): Experiment {
  return ExperimentFromJSONTyped(json, false)
}

export function ExperimentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Experiment {
  if (json === undefined || json === null) {
    return json
  }
  return {
    extras: !exists(json, 'extras') ? undefined : json['extras'],
    data: (json['data'] as Array<any>).map(ExperimentDataInnerFromJSON),
    optimizerConfig: ExperimentOptimizerConfigFromJSON(json['optimizerConfig']),
  }
}

export function ExperimentToJSON(value?: Experiment | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    extras: value.extras,
    data: (value.data as Array<any>).map(ExperimentDataInnerToJSON),
    optimizerConfig: ExperimentOptimizerConfigToJSON(value.optimizerConfig),
  }
}
