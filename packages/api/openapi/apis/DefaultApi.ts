/* tslint:disable */
/* eslint-disable */
/**
 * Process Optimizer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { Experiment, ModelError, Result } from '../models'
import {
  ExperimentFromJSON,
  ExperimentToJSON,
  ModelErrorFromJSON,
  ModelErrorToJSON,
  ResultFromJSON,
  ResultToJSON,
} from '../models'

export interface OptimizerapiOptimizerRunRequest {
  experiment: Experiment
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Run optimizer with the specified parameters
   */
  async optimizerapiOptimizerRunRaw(
    requestParameters: OptimizerapiOptimizerRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Result>> {
    if (
      requestParameters.experiment === null ||
      requestParameters.experiment === undefined
    ) {
      throw new runtime.RequiredError(
        'experiment',
        'Required parameter requestParameters.experiment was null or undefined when calling optimizerapiOptimizerRun.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      queryParameters['apikey'] = this.configuration.apiKey('apikey') // apikey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'oauth2',
        []
      )
    }

    const response = await this.request(
      {
        path: `/optimizer`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ExperimentToJSON(requestParameters.experiment),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      ResultFromJSON(jsonValue)
    )
  }

  /**
   * Run optimizer with the specified parameters
   */
  async optimizerapiOptimizerRun(
    requestParameters: OptimizerapiOptimizerRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Result> {
    const response = await this.optimizerapiOptimizerRunRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
